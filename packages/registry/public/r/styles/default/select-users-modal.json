{
  "name": "select-users-modal",
  "type": "registry:block",
  "version": "1.1.0",
  "private": true,
  "description": "A modal for selecting users.",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/modals/select-users-modal/select-users-modal.tsx",
      "content": "import React, { useMemo, useState } from 'react'\n\nimport {\n  Button,\n  Checkbox,\n  Heading,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  Stack,\n  Text,\n} from '@chakra-ui/react'\nimport {\n  SearchInput,\n  StructuredList,\n  StructuredListCell,\n  StructuredListItem,\n} from '@saas-ui/react'\n\nexport interface SelectListModalItem {\n  id: string | number\n  label?: string\n}\n\nexport interface SelectListModalProps<\n  Item extends SelectListModalItem = SelectListModalItem,\n> extends Omit<ModalProps, 'children'> {\n  title?: string\n  description?: string\n  searchPlaceholder?: string\n  items: Item[]\n  renderItem?: (item: Item) => React.ReactNode\n  filterFn?: (item: Item, searchTerm: string) => boolean\n  onSubmit?: (ids: Item['id'][]) => void\n}\n\nexport const SelectListModal = <\n  Item extends SelectListModalItem = SelectListModalItem,\n>(\n  props: SelectListModalProps<Item>,\n) => {\n  const { onClose, items, filterFn, ...rest } = props\n  const [selected, setSelected] = useState<(string | number)[]>([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const handleSelect = (id: string | number) => {\n    setSelected((prev) =>\n      prev.includes(id)\n        ? prev.filter((selectedId) => selectedId !== id)\n        : [...prev, id],\n    )\n  }\n\n  const filteredItems = useMemo(() => {\n    if (!searchTerm) {\n      return items\n    }\n\n    return items.filter((item) => {\n      if (filterFn) {\n        return filterFn(item, searchTerm)\n      }\n      return item.label?.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n  }, [items, searchTerm])\n\n  const renderItem = React.useCallback(\n    (item: Item) => {\n      if (props.renderItem) {\n        return props.renderItem(item)\n      }\n      return <Text>{item.label}</Text>\n    },\n    [props.renderItem],\n  )\n\n  const noResults = searchTerm && filteredItems.length === 0 && (\n    <StructuredListItem>\n      <StructuredListCell py=\"2\" px=\"4\" textAlign=\"center\">\n        No results for \"{searchTerm}\"\n      </StructuredListCell>\n    </StructuredListItem>\n  )\n\n  return (\n    <Modal onClose={onClose} initialFocusRef={inputRef} {...rest}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader borderBottomWidth=\"1px\">\n          <Stack align=\"left\" justify=\"space-between\" dir=\"column\" spacing=\"1\">\n            <ModalCloseButton />\n            <Heading fontSize=\"lg\" fontWeight=\"medium\">\n              {props.title}\n            </Heading>\n            <Text fontSize=\"sm\" fontWeight=\"normal\" color=\"muted\" mb={2}>\n              {props.description}\n            </Text>\n            <SearchInput\n              ref={inputRef}\n              size=\"sm\"\n              placeholder={props.searchPlaceholder || 'Search...'}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              onReset={() => setSearchTerm('')}\n              onKeyDown={(e) => {\n                // prevent modal from closing\n                if (e.key === 'Escape') {\n                  e.preventDefault()\n                  e.stopPropagation()\n                }\n              }}\n            />\n          </Stack>\n        </ModalHeader>\n\n        <ModalBody p=\"0\">\n          <StructuredList overflowY=\"auto\" maxHeight=\"$80vh\" py=\"0\">\n            {noResults}\n            {filteredItems.map((item) => (\n              <StructuredListItem\n                key={item.id}\n                onClick={() => handleSelect(item.id)}\n                data-selected={selected.includes(item.id) ? '' : undefined}\n                _selected={{\n                  backgroundColor: 'blackAlpha.100',\n                  _dark: {\n                    backgroundColor: 'whiteAlpha.100',\n                  },\n                }}\n                onKeyUp={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    handleSelect(item.id)\n                  }\n                }}\n              >\n                <StructuredListCell ps=\"4\">\n                  {renderItem(item)}\n                </StructuredListCell>\n                <StructuredListCell pe=\"4\">\n                  <Checkbox\n                    key={item.id}\n                    isChecked={selected.includes(item.id)}\n                    onChange={() => handleSelect(item.id)}\n                  />\n                </StructuredListCell>\n              </StructuredListItem>\n            ))}\n          </StructuredList>\n        </ModalBody>\n        <ModalFooter borderTopWidth=\"1px\">\n          <Button variant=\"secondary\" mr={3} onClick={onClose}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={() => props.onSubmit?.(selected)}>\n            Add users\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/modals/select-users-modal/user-persona.tsx",
      "content": "import {\n  Persona,\n  PersonaAvatar,\n  PersonaDetails,\n  PersonaLabel,\n  type PersonaProps,\n  PersonaSecondaryLabel,\n} from '@saas-ui/react'\n\nexport interface UserPersonaProps extends PersonaProps {\n  email: string\n}\n\nexport const UserPersona: React.FC<UserPersonaProps> = (props) => {\n  const { src, name, email, presence, ...rest } = props\n  return (\n    <Persona {...rest}>\n      <PersonaAvatar\n        name={name}\n        src={src}\n        presence={presence}\n        size=\"sm\"\n        sx={{\n          '.chakra-avatar__badge': {\n            _dark: {\n              '--avatar-border-color': 'var(--chakra-colors-gray-700)',\n            },\n          },\n        }}\n      />\n      <PersonaDetails>\n        <PersonaLabel>{name}</PersonaLabel>\n        <PersonaSecondaryLabel>{email}</PersonaSecondaryLabel>\n      </PersonaDetails>\n    </Persona>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/modals/select-users-modal/select-users-modal.stories.tsx",
      "content": "import React from 'react'\n\nimport { Button, useDisclosure } from '@chakra-ui/react'\nimport { useSnackbar } from '@saas-ui/react'\nimport type { Meta } from '@storybook/react'\n\nimport { SelectListModal } from './select-users-modal.js'\nimport { UserPersona } from './user-persona.js'\n\nexport default {\n  title: 'Blocks/Modals/SelectUsersModal',\n} as Meta\n\nexport const Default = () => {\n  const snackbar = useSnackbar()\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    defaultIsOpen: true,\n  })\n\n  const users = [\n    {\n      id: 1,\n      name: 'Horace Torp',\n      email: 'Esta.Gibson@gmail.com',\n      presence: 'busy',\n    },\n    {\n      id: 2,\n      name: 'Louis Bosco',\n      email: 'Trenton1@yahoo.com',\n      presence: 'online',\n    },\n    {\n      id: 3,\n      name: 'Cory Bauch',\n      email: 'Beau_Corwin27@hotmail.com',\n      presence: 'offline',\n    },\n    {\n      id: 4,\n      name: 'Dr. Tyrone Parker',\n      email: 'Johann_Schaden47@gmail.com',\n      presence: 'busy',\n    },\n    {\n      id: 5,\n      name: 'Ora Ryan',\n      email: 'Bernadine91@hotmail.com',\n      presence: 'online',\n    },\n    {\n      id: 6,\n      name: 'Martin Koss IV',\n      email: 'Hardy_Swanaiwski@yahoo.com',\n      presence: 'busy',\n    },\n    {\n      id: 7,\n      name: 'Christian Dach',\n      email: 'Emily.Adams@yahoo.com',\n      presence: 'away',\n    },\n    {\n      id: 8,\n      name: 'Angel Pfeffer',\n      email: 'Horacio_McLaughlin@yahoo.com',\n      presence: 'dnd',\n    },\n    {\n      id: 9,\n      name: 'Kathryn DuBuque',\n      email: 'Manuel22@yahoo.com',\n      presence: 'offline',\n    },\n  ]\n\n  return (\n    <>\n      <Button onClick={onOpen} variant=\"primary\" colorScheme=\"purple\">\n        Open Modal\n      </Button>\n      <SelectListModal\n        items={users}\n        renderItem={(user) => (\n          <UserPersona\n            key={user.id}\n            name={user.name}\n            email={user.email.toLowerCase()}\n            presence={user.presence}\n          />\n        )}\n        filterFn={(item, query) => {\n          const q = query.toLowerCase()\n          return (\n            item.name.toLowerCase().includes(q) ||\n            item.email.toLowerCase().includes(q)\n          )\n        }}\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"Select users\"\n        description=\"Add or remove users from the project\"\n        onSubmit={(items) => {\n          snackbar.info(`You selected ${items.length} users.`)\n          onClose()\n        }}\n        // These properties are only required for demo purposes\n        blockScrollOnMount={false}\n        trapFocus={false}\n      />\n    </>\n  )\n}\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true,
    "height": "840px"
  }
}