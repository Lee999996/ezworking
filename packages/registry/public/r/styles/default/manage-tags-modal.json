{
  "name": "manage-tags-modal",
  "type": "registry:block",
  "version": "1.1.0",
  "private": true,
  "description": "A modal for managing tags.",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/modals/manage-tags-modal/manage-tags-modal.tsx",
      "content": "import React, { useEffect, useMemo, useState } from 'react'\n\nimport {\n  Box,\n  Button,\n  Collapse,\n  Flex,\n  FormControl,\n  FormLabel,\n  HStack,\n  Heading,\n  IconButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  Stack,\n  Text,\n  useControllableState,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport {\n  SearchInput,\n  StructuredList,\n  StructuredListCell,\n  StructuredListItem,\n} from '@saas-ui/react'\nimport { LuPencil, LuTrash } from 'react-icons/lu'\n\nexport interface Tag {\n  id: string\n  name: string\n  count: number\n  color: string\n}\n\nexport interface TagListItemProps {\n  item: Tag\n  isEditing?: boolean\n  onEdit?: () => void\n  onCancel?: () => void\n  onSave?: (tag: Tag) => Promise<void>\n  onDelete?: () => void\n}\n\nexport const TagListItem: React.FC<TagListItemProps> = (props) => {\n  const {\n    item,\n    isEditing,\n    onEdit: onEditProp,\n    onCancel: onCancelProp,\n    onSave: onSaveProp,\n    onDelete: onDeleteProp,\n  } = props\n\n  const [edit, setEdit] = useControllableState({\n    value: isEditing,\n    defaultValue: false,\n  })\n\n  const [error, setError] = React.useState('')\n  const [isLoading, setLoading] = React.useState(false)\n\n  const [values, setValues] = useState({\n    color: item.color,\n    name: item.name,\n  })\n\n  const onEdit = () => {\n    setValues({\n      color: item.color,\n      name: item.name,\n    })\n    setEdit(true)\n    onEditProp?.()\n  }\n\n  const onCancel = () => {\n    setEdit(false)\n    setError('')\n    onCancelProp?.()\n  }\n\n  const onSave = async () => {\n    try {\n      setError('')\n      setLoading(true)\n\n      await onSaveProp?.({\n        ...item,\n        ...values,\n      })\n\n      setEdit(false)\n    } catch (e: any) {\n      setError(e.message)\n      console.error(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const colorBadge = (\n    <Box\n      bgColor={`${values.color ?? item.color}.500`}\n      borderRadius=\"full\"\n      w={2}\n      h={2}\n    />\n  )\n\n  return edit ? (\n    <StructuredListItem role=\"group\" py=\"1\">\n      <StructuredListCell ps=\"3\">\n        <IconButton aria-label=\"Change color\" variant=\"outline\">\n          {colorBadge}\n        </IconButton>\n      </StructuredListCell>\n      <StructuredListCell\n        display=\"flex\"\n        alignItems=\"center\"\n        flex=\"1\"\n        gap=\"2\"\n        px=\"0\"\n      >\n        <FormControl isInvalid={!!error}>\n          <FormLabel display=\"none\">Label</FormLabel>\n          <Input\n            type=\"text\"\n            defaultValue={item.name}\n            value={values.name}\n            size=\"sm\"\n            autoFocus\n            px=\"2\"\n            onChange={(e) => setValues({ ...values, name: e.target.value })}\n            onKeyDown={(e) => {\n              if (e.key === 'Escape') {\n                // prevent modal from closing\n                e.preventDefault()\n                e.stopPropagation()\n\n                // cancel editing\n              } else if (e.key === 'Enter') {\n                // save changes\n                onSave()\n              }\n            }}\n          />\n        </FormControl>\n      </StructuredListCell>\n      <StructuredListCell display=\"flex\" gap=\"2\" pe=\"4\">\n        <Button variant=\"secondary\" onClick={() => onCancel()}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"primary\"\n          isLoading={isLoading}\n          onClick={() => onSave()}\n        >\n          Save\n        </Button>\n      </StructuredListCell>\n    </StructuredListItem>\n  ) : (\n    <StructuredListItem role=\"group\" py=\"1\">\n      <StructuredListCell ps=\"3\">\n        <Flex\n          border=\"1px solid transparent\"\n          boxSize=\"8\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          {colorBadge}\n        </Flex>\n      </StructuredListCell>\n      <StructuredListCell display=\"flex\" alignItems=\"center\" flex=\"1\" gap=\"2\">\n        <Text as=\"span\" fontSize=\"sm\">\n          {item.name}\n        </Text>\n        <Text as=\"span\" fontSize=\"xs\" color=\"muted\">\n          {item.count}\n        </Text>\n      </StructuredListCell>\n      <StructuredListCell\n        display=\"flex\"\n        gap=\"2\"\n        pe=\"4\"\n        opacity=\"0\"\n        _groupHover={{ opacity: 1 }}\n      >\n        <IconButton\n          aria-label=\"edit\"\n          isRound\n          variant=\"ghost\"\n          onClick={() => onEdit()}\n        >\n          <LuPencil />\n        </IconButton>\n        <IconButton\n          aria-label=\"Delete\"\n          isRound\n          variant=\"ghost\"\n          onClick={() => onDeleteProp?.()}\n        >\n          <LuTrash />\n        </IconButton>\n      </StructuredListCell>\n    </StructuredListItem>\n  )\n}\n\nexport interface TagListAddItemProps {\n  isOpen?: boolean\n  onCancel?: () => void\n  onSave?: (tag: Pick<Tag, 'color' | 'name'>) => Promise<void>\n}\n\nexport const TagListAddItem: React.FC<TagListAddItemProps> = (props) => {\n  const { isOpen, onCancel: onCancelProp, onSave: onSaveProp } = props\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const disclosure = useDisclosure({\n    isOpen,\n    defaultIsOpen: true,\n    onClose: () => {\n      setValues({\n        color: 'gray',\n        name: '',\n      })\n    },\n  })\n\n  const [error, setError] = React.useState('')\n  const [isLoading, setLoading] = React.useState(false)\n\n  const [values, setValues] = useState({\n    color: 'gray',\n    name: '',\n  })\n\n  useEffect(() => {\n    if (isOpen) {\n      inputRef.current?.focus()\n    }\n  }, [isOpen])\n\n  const onCancel = () => {\n    setError('')\n    disclosure.onClose()\n    onCancelProp?.()\n  }\n\n  const onSave = async () => {\n    try {\n      setError('')\n      setLoading(true)\n\n      await onSaveProp?.(values)\n\n      disclosure.onClose()\n    } catch (e: any) {\n      setError(e.message)\n      console.error(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const colorBadge = (\n    <Box bgColor={`${values.color}.500`} borderRadius=\"full\" w={2} h={2} />\n  )\n\n  return (\n    <Collapse in={disclosure.isOpen}>\n      <HStack\n        role=\"group\"\n        py=\"2\"\n        bg=\"gray.50\"\n        px=\"2\"\n        _dark={{ bg: 'whiteAlpha.100' }}\n        borderBottomWidth=\"1px\"\n      >\n        <Box ps=\"3\">\n          <IconButton aria-label=\"Change color\" variant=\"outline\">\n            {colorBadge}\n          </IconButton>\n        </Box>\n        <HStack display=\"flex\" alignItems=\"center\" flex=\"1\" gap=\"2\" px=\"0\">\n          <FormControl isInvalid={!!error}>\n            <FormLabel display=\"none\">Label</FormLabel>\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              name=\"tag\"\n              placeholder=\"Tag name\"\n              value={values.name}\n              size=\"sm\"\n              px=\"2\"\n              onChange={(e) => setValues({ ...values, name: e.target.value })}\n              onKeyDown={(e) => {\n                if (e.key === 'Escape') {\n                  // prevent modal from closing\n                  e.preventDefault()\n                  e.stopPropagation()\n\n                  // cancel editing\n                } else if (e.key === 'Enter') {\n                  // save changes\n                  onSave()\n                }\n              }}\n            />\n          </FormControl>\n        </HStack>\n        <HStack gap=\"2\" pe=\"4\">\n          <Button variant=\"secondary\" onClick={() => onCancel()}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            isLoading={isLoading}\n            onClick={() => onSave()}\n          >\n            Save\n          </Button>\n        </HStack>\n      </HStack>\n    </Collapse>\n  )\n}\n\nexport interface ManageTagsModalProps extends Omit<ModalProps, 'children'> {\n  items: Tag[]\n  onSave: (tag: Tag) => Promise<void>\n  onCreate: (tag: Pick<Tag, 'color' | 'name'>) => Promise<void>\n  onDelete: (id: Tag['id']) => Promise<void>\n}\n\nexport const ManageTagsModal: React.FC<ManageTagsModalProps> = (props) => {\n  const { onClose, items, onSave, onCreate, onDelete, ...rest } = props\n\n  const addTag = useDisclosure()\n  const [editId, setEditId] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const filteredItems = useMemo(() => {\n    if (!searchTerm) {\n      return items\n    }\n\n    return items.filter((item) => {\n      return item.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n  }, [items, searchTerm])\n\n  const noResults = searchTerm && filteredItems.length === 0 && (\n    <StructuredListItem>\n      <StructuredListCell py=\"2\" px=\"4\" textAlign=\"center\">\n        No results for \"{searchTerm}\"\n      </StructuredListCell>\n    </StructuredListItem>\n  )\n\n  return (\n    <Modal onClose={onClose} initialFocusRef={inputRef} {...rest}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader borderBottomWidth=\"1px\">\n          <Stack align=\"left\" justify=\"space-between\" dir=\"column\" spacing=\"1\">\n            <ModalCloseButton />\n            <Heading fontSize=\"lg\" fontWeight=\"medium\">\n              Manage tags\n            </Heading>\n            <Text fontSize=\"sm\" fontWeight=\"normal\" color=\"muted\" mb={2}>\n              Add, edit and delete tags.\n            </Text>\n            <HStack spacing=\"2\">\n              <SearchInput\n                ref={inputRef}\n                size=\"sm\"\n                placeholder=\"Filter by name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                onReset={() => setSearchTerm('')}\n                onKeyDown={(e) => {\n                  // prevent modal from closing\n                  if (e.key === 'Escape') {\n                    e.preventDefault()\n                    e.stopPropagation()\n                  }\n                }}\n              />\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  setEditId(null)\n                  addTag.onOpen()\n                }}\n              >\n                Add tag\n              </Button>\n            </HStack>\n          </Stack>\n        </ModalHeader>\n        <ModalBody p=\"0\" maxHeight=\"$80vh\">\n          <TagListAddItem\n            {...addTag}\n            onSave={async (tag) => {\n              const result = await onCreate(tag)\n              addTag.onClose()\n              return result\n            }}\n            onCancel={() => addTag.onClose()}\n          />\n          <StructuredList>\n            {noResults}\n            {filteredItems.map((item) => (\n              <TagListItem\n                key={item.id}\n                item={item}\n                onEdit={() => {\n                  setEditId(item.id)\n                  addTag.onClose()\n                }}\n                onCancel={() => setEditId(null)}\n                onSave={async (tag) => {\n                  const result = await onSave(tag)\n                  setEditId(null)\n                  return result\n                }}\n                onDelete={() => onDelete(item.id)}\n                isEditing={editId === item.id}\n              />\n            ))}\n          </StructuredList>\n        </ModalBody>\n        <ModalFooter borderTopWidth=\"1px\">\n          <Button variant=\"secondary\" onClick={onClose}>\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/modals/manage-tags-modal/manage-tags-modal.stories.tsx",
      "content": "import React, { useState } from 'react'\n\nimport { Button, useDisclosure } from '@chakra-ui/react'\nimport type { Meta } from '@storybook/react'\n\nimport { ManageTagsModal, type Tag } from './manage-tags-modal.js'\n\nexport default {\n  title: 'Blocks/Modals/ManageTagsModal',\n} as Meta\n\nexport const Default = () => {\n  const disclosure = useDisclosure({\n    defaultIsOpen: true,\n  })\n\n  const [items, setItems] = useState<Tag[]>([\n    {\n      id: '1',\n      name: 'Feature',\n      count: 15,\n      color: 'green',\n    },\n    {\n      id: '2',\n      name: 'Javascript',\n      count: 4,\n      color: 'blue',\n    },\n    {\n      id: '3',\n      name: 'Bug',\n      count: 12,\n      color: 'yellow',\n    },\n    {\n      id: '4',\n      name: 'Beta',\n      count: 14,\n      color: 'red',\n    },\n    {\n      id: '5',\n      name: 'Backend',\n      count: 5,\n      color: 'green',\n    },\n    {\n      id: '6',\n      name: 'Design',\n      count: 2,\n      color: 'purple',\n    },\n    {\n      id: '7',\n      name: 'UI',\n      count: 6,\n      color: 'red',\n    },\n    {\n      id: '8',\n      name: 'Discussion',\n      count: 54,\n      color: 'gray',\n    },\n  ])\n\n  return (\n    <>\n      <Button onClick={disclosure.onOpen} variant=\"primary\">\n        Manage tags\n      </Button>\n\n      <ManageTagsModal\n        {...disclosure}\n        items={items}\n        onSave={async (item) => {\n          setItems((items) => {\n            const index = items.findIndex((i) => i.id === item.id)\n            items[index] = item\n            return [...items].sort((a, b) => a.name.localeCompare(b.name))\n          })\n        }}\n        onCreate={async (item) => {\n          const tag = {\n            id: `${items.length + 1}`,\n            name: item.name,\n            count: 0,\n            color: item.color,\n          }\n          setItems((items) =>\n            [...items, tag].sort((a, b) => a.name.localeCompare(b.name)),\n          )\n        }}\n        onDelete={async (id) => {\n          setItems((items) => {\n            const index = items.findIndex((i) => i.id === id)\n            items.splice(index, 1)\n            return [...items]\n          })\n        }}\n        // These properties are only required for demo purposes\n        blockScrollOnMount={false}\n        trapFocus={false}\n      />\n    </>\n  )\n}\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true,
    "height": "840px"
  }
}