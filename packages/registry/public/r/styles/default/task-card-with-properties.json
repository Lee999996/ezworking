{
  "name": "task-card-with-properties",
  "type": "registry:block",
  "version": "1.1.0",
  "private": true,
  "description": "A task card with properties",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/cards/task-card-with-properties/task-card-with-properties.tsx",
      "content": "import * as React from 'react'\n\nimport {\n  Badge,\n  Box,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  HStack,\n  Heading,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Tag,\n  Text,\n} from '@chakra-ui/react'\nimport {\n  PersonaAvatar,\n  Property,\n  PropertyLabel,\n  PropertyList,\n  PropertyValue,\n} from '@saas-ui/react'\nimport {\n  LuCalendar,\n  LuCheckCircle,\n  LuCircleDashed,\n  LuCircleDot,\n  LuListChecks,\n  LuMilestone,\n  LuMoreVertical,\n  LuSignalHigh,\n  LuSignalLow,\n  LuSignalMedium,\n  LuSignalZero,\n} from 'react-icons/lu'\n\nexport interface Task {\n  status: TaskState\n  priority: Priority\n  dueDate: string\n  milestone: string\n  subtasks: string\n  tags: Array<string>\n  user: {\n    name: string\n    avatar: string\n    presence: string\n  }\n}\n\nexport function TaskCardWithProperties(props: { task: Task }) {\n  const { task } = props\n\n  return (\n    <Card size=\"sm\">\n      <CardHeader\n        display=\"flex\"\n        alignItems=\"center\"\n        gap=\"2\"\n        position=\"relative\"\n      >\n        <PersonaAvatar\n          size=\"2xs\"\n          name={task.user.name}\n          src={task.user.avatar}\n          presence={task.user.presence}\n        />\n        <Text fontSize=\"sm\" fontWeight=\"medium\">\n          {task.user.name}\n        </Text>\n        <Menu>\n          <MenuButton\n            as={IconButton}\n            position=\"absolute\"\n            top=\"2\"\n            right=\"2\"\n            aria-label=\"Options\"\n            variant=\"ghost\"\n            icon={<LuMoreVertical />}\n          />\n          <MenuList>\n            <MenuItem>Edit</MenuItem>\n            <MenuItem>Delete</MenuItem>\n          </MenuList>\n        </Menu>\n      </CardHeader>\n      <CardBody pt=\"1\">\n        <HStack mb=\"1\" alignItems=\"center\">\n          <TaskStatus status={task.status} />\n\n          <Heading size=\"xs\" fontWeight=\"medium\" noOfLines={1}>\n            Define design tokens\n          </Heading>\n        </HStack>\n\n        <Text color=\"muted\" mb=\"2\" noOfLines={1}>\n          Design consistent variables for visual properties like colors,\n          typography, and spacing.\n        </Text>\n\n        <PropertyList display=\"grid\" gridTemplateColumns=\"1fr 1fr\">\n          <TaskProperty id=\"dueDate\" value={task.dueDate} />\n          <TaskProperty id=\"milestone\" value={task.milestone} />\n          <TaskProperty id=\"priority\" value={task.priority} />\n          <TaskProperty id=\"subtasks\" value={task.subtasks} />\n        </PropertyList>\n      </CardBody>\n      <CardFooter borderTopWidth=\"1px\">\n        <TaskTags tags={task.tags} />\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction TaskStatus(props: { status: Task['status'] }) {\n  const status = states[props.status]\n\n  return (\n    <Box color={status.color} rounded=\"full\" aria-label={status.label}>\n      {status.icon}\n    </Box>\n  )\n}\n\nfunction TaskProperty(props: { id: TaskPropertyId; value: string | number }) {\n  const property = properties[props.id]\n\n  if (!property) {\n    return null\n  }\n\n  return (\n    <Property key={props.id} color=\"muted\">\n      <PropertyLabel display=\"flex\" width=\"3\" aria-label={property.label}>\n        {runIfFn(property.icon, props.value)}\n      </PropertyLabel>\n      <PropertyValue>\n        {'value' in property\n          ? runIfFn(property.value, props.value)\n          : props.value}\n      </PropertyValue>\n    </Property>\n  )\n}\n\nfunction runIfFn<T extends React.ReactNode>(\n  prop: T | ((...args: any[]) => T),\n  ...args: any[]\n) {\n  return typeof prop === 'function' ? prop(...args) : prop\n}\n\nfunction TaskTags(props: { tags: Array<string> }) {\n  const visibleTags = props.tags.slice(0, 3)\n  const hiddenTags = props.tags.slice(3).length\n\n  return (\n    <>\n      {visibleTags?.map((id, i) => {\n        const tag = tags.find((t) => t.id === id)\n\n        if (!tag) {\n          return null\n        }\n\n        return (\n          <Tag\n            key={i}\n            variant=\"outline\"\n            mr=\"1\"\n            boxShadow=\"none\"\n            border=\"1px solid\"\n            borderColor=\"blackAlpha.300\"\n            color=\"gray.600\"\n            _dark={{\n              borderColor: 'whiteAlpha.300',\n              color: 'gray.300',\n            }}\n          >\n            <Badge\n              variant=\"solid\"\n              boxShadow=\"none\"\n              colorScheme={tag.color}\n              boxSize=\"2\"\n              rounded=\"full\"\n              me=\"1\"\n            />\n            {tag.label}\n          </Tag>\n        )\n      })}\n      {hiddenTags > 0 && (\n        <Tag\n          variant=\"outline\"\n          mr=\"1\"\n          boxShadow=\"none\"\n          border=\"1px dashed\"\n          borderColor=\"blackAlpha.300\"\n          color=\"muted\"\n          _dark={{\n            borderColor: 'whiteAlpha.200',\n          }}\n        >\n          +{hiddenTags}\n        </Tag>\n      )}\n    </>\n  )\n}\n\nconst states = {\n  backlog: {\n    label: 'Backlog',\n    color: 'gray',\n    icon: <LuCircleDashed />,\n  },\n  'in-progress': {\n    label: 'In progress',\n    color: 'green',\n    icon: <LuCircleDot />,\n  },\n  completed: {\n    label: 'Completed',\n    color: 'blue',\n    icon: <LuCheckCircle />,\n  },\n}\n\ntype TaskState = keyof typeof states\n\nconst properties = {\n  dueDate: {\n    icon: <LuCalendar />,\n    label: 'Due date',\n  },\n  milestone: {\n    icon: <LuMilestone />,\n    label: 'Milestone',\n  },\n  priority: {\n    icon: (priority: Task['priority']) => priorities[priority]?.icon,\n    label: 'Priority',\n    value: (priority: Task['priority']) => priorities[priority]?.label,\n  },\n  subtasks: {\n    icon: <LuListChecks />,\n    label: 'Subtasks',\n  },\n}\n\ntype TaskPropertyId = keyof typeof properties\n\nconst priorities = {\n  0: {\n    label: 'None',\n    icon: <LuSignalZero />,\n  },\n  1: {\n    label: 'Low',\n    icon: <LuSignalLow />,\n  },\n  2: {\n    label: 'Medium',\n    icon: <LuSignalMedium />,\n  },\n  3: {\n    label: 'High',\n    icon: <LuSignalHigh />,\n  },\n}\n\nconst tags = [\n  {\n    id: 'css',\n    label: 'CSS',\n    color: 'blue',\n  },\n  {\n    id: 'ui',\n    label: 'UI',\n    color: 'green',\n  },\n  {\n    id: 'javascript',\n    label: 'Javascript',\n    color: 'yellow',\n  },\n  {\n    id: 'react',\n    label: 'React',\n    color: 'blue',\n  },\n]\n\ntype Priority = keyof typeof priorities\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/cards/task-card-with-properties/task-card-with-properties.stories.tsx",
      "content": "import * as React from 'react'\n\nimport { Meta } from '@storybook/react'\n\nimport { Task, TaskCardWithProperties } from './task-card-with-properties.js'\n\nexport default {\n  title: 'Blocks/Cards/TaskCardWithProperties',\n} as Meta\n\nconst task = {\n  status: 'backlog',\n  priority: 3,\n  dueDate: '2024-03-01',\n  user: {\n    name: 'Sara Cruz',\n    avatar: '/avatars/10.jpg',\n    presence: 'online',\n  },\n  tags: ['css', 'ui', 'javascript', 'react'],\n  milestone: 'v1.0',\n  subtasks: '3/5',\n} satisfies Task\n\nexport const Default = () => <TaskCardWithProperties task={task} />\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true,
    "maxWidth": "380px"
  }
}