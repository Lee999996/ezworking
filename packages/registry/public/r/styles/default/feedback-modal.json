{
  "name": "feedback-modal",
  "type": "registry:block",
  "version": "1.1.0",
  "private": true,
  "description": "A modal for providing feedback.",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/modals/feedback-modal/feedback-modal.tsx",
      "content": "import * as React from 'react'\n\nimport {\n  HStack,\n  Heading,\n  IconButton,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  Text,\n  Textarea,\n  forwardRef,\n} from '@chakra-ui/react'\nimport {\n  ToggleButton,\n  ToggleButtonGroup,\n  ToggleButtonGroupProps,\n} from '@saas-ui-pro/react'\nimport {\n  FileUpload,\n  FileUploadDropzone,\n  FileUploadOptions,\n  FileUploadTrigger,\n} from '@saas-ui/file-upload'\nimport {\n  Controller,\n  Form,\n  FormLayout,\n  Link,\n  SubmitButton,\n  SubmitHandler,\n  createField,\n} from '@saas-ui/react'\nimport {\n  LuAlertTriangle,\n  LuHelpCircle,\n  LuMessageCircle,\n  LuPaperclip,\n  LuX,\n} from 'react-icons/lu'\n\nexport interface FeedbackInput {\n  type: 'problem' | 'question' | 'feedback'\n  comment: string\n  files: File[]\n}\n\nexport interface FeedbackModalProps extends Omit<ModalProps, 'children'> {\n  onSubmit: SubmitHandler<FeedbackInput>\n}\n\nexport const FeedbackModal: React.FC<FeedbackModalProps> = (props) => {\n  const { onSubmit, ...rest } = props\n\n  const defaultValues: FeedbackInput = {\n    type: 'feedback',\n    comment: '',\n    files: [],\n  }\n\n  return (\n    <Modal size=\"xl\" {...rest}>\n      <ModalOverlay />\n      <ModalContent>\n        <Form onSubmit={onSubmit} defaultValues={defaultValues}>\n          {({ control }) => (\n            <>\n              <ModalHeader borderBottomWidth=\"1px\">\n                <Heading as=\"h3\" fontSize=\"lg\" fontWeight=\"medium\" mb=\"1\">\n                  Feedback\n                </Heading>\n                <Text color=\"muted\" fontSize=\"sm\" fontWeight=\"normal\">\n                  Got feedback? Share your feature requests and why they're\n                  important.\n                </Text>\n                <ModalCloseButton />\n              </ModalHeader>\n              <ModalBody>\n                <FormLayout>\n                  <ToggleButtonField\n                    name=\"type\"\n                    items={[\n                      {\n                        value: 'problem',\n                        label: 'Problem',\n                        icon: <LuAlertTriangle />,\n                      },\n                      {\n                        value: 'question',\n                        label: 'Question',\n                        icon: <LuHelpCircle />,\n                      },\n                      {\n                        value: 'feedback',\n                        label: 'Feedback',\n                        icon: <LuMessageCircle />,\n                      },\n                    ]}\n                  />\n                  <Controller\n                    name=\"comment\"\n                    control={control}\n                    render={({ field }) => (\n                      <Textarea\n                        border=\"0\"\n                        height=\"120px\"\n                        placeholder=\"What if...\"\n                        p=\"0\"\n                        _focus={{\n                          boxshadow: 'none',\n                          border: 0,\n                        }}\n                        _focusVisible={{\n                          boxshadow: 'none',\n                          border: 0,\n                        }}\n                        {...field}\n                      ></Textarea>\n                    )}\n                  />\n\n                  <UploadField name=\"files\" />\n                </FormLayout>\n              </ModalBody>\n              <ModalFooter gap=\"4\" borderTopWidth=\"1px\">\n                <Text color=\"muted\">\n                  Email us at{' '}\n                  <Link\n                    href=\"mailto:hello@saas-ui.dev\"\n                    color=\"chakra-body-text\"\n                  >\n                    hello@saas-ui.dev\n                  </Link>\n                  . We're committed to reading all messages, even if we can't\n                  respond to every single one.\n                </Text>\n                <SubmitButton flexShrink=\"0\">Send feedback</SubmitButton>\n              </ModalFooter>\n            </>\n          )}\n        </Form>\n      </ModalContent>\n    </Modal>\n  )\n}\n\ninterface ToggleButtonFieldProps<Type extends 'radio' | 'checkbox' = 'radio'>\n  extends Omit<ToggleButtonGroupProps, 'value' | 'onChange'> {\n  items: {\n    value: Type extends 'radio' ? string : string[]\n    label: string\n    icon: React.ReactElement\n  }[]\n  value?: Type extends 'radio' ? string : string[]\n  onChange?: (value: Type extends 'radio' ? string : string[]) => void\n}\n\nconst ToggleButtonField = createField<ToggleButtonFieldProps>(\n  forwardRef((props, ref) => {\n    const { items, type = 'radio', onChange, ...rest } = props\n\n    return (\n      <ToggleButtonGroup\n        ref={ref}\n        type={type}\n        isAttached={false}\n        onChange={onChange as any}\n        {...rest}\n      >\n        {items.map((item) => (\n          <ToggleButton\n            key={item.value}\n            value={item.value}\n            leftIcon={item.icon}\n          >\n            {item.label}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    )\n  }),\n  {\n    isControlled: true,\n  },\n)\n\ninterface UploadFieldProps extends Omit<FileUploadOptions, 'onFilesChange'> {\n  onChange?: (files: File[]) => void\n}\n\nconst UploadField = createField<UploadFieldProps>(\n  forwardRef((props, ref) => {\n    const { onChange, maxFiles = 10, ...rest } = props\n    return (\n      <FileUpload\n        maxFileSize={1024 * 1024}\n        maxFiles={maxFiles}\n        {...rest}\n        onFilesChange={(files) => {\n          onChange?.(files.acceptedFiles)\n        }}\n        inputRef={ref}\n      >\n        {({ files, deleteFile }) => (\n          <FileUploadDropzone border=\"0\" alignItems=\"start\" px=\"0\">\n            {files.map((file) => (\n              <HStack>\n                <Text fontSize=\"sm\">{file.name}</Text>\n                <IconButton\n                  aria-label=\"Remove file\"\n                  variant=\"ghost\"\n                  size=\"xs\"\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    deleteFile(file)\n                  }}\n                >\n                  <LuX />\n                </IconButton>\n              </HStack>\n            ))}\n            {files.length < maxFiles ? (\n              <FileUploadTrigger>\n                <HStack>\n                  <LuPaperclip /> <Text>Attach images, files or videos.</Text>\n                </HStack>\n              </FileUploadTrigger>\n            ) : null}\n          </FileUploadDropzone>\n        )}\n      </FileUpload>\n    )\n  }),\n  {\n    isControlled: true,\n  },\n)\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/modals/feedback-modal/feedback-modal.stories.tsx",
      "content": "import * as React from 'react'\n\nimport { Button, useDisclosure } from '@chakra-ui/react'\nimport { type SubmitHandler, useSnackbar } from '@saas-ui/react'\nimport type { Meta } from '@storybook/react'\n\nimport { type FeedbackInput, FeedbackModal } from './feedback-modal.js'\n\nexport default {\n  title: 'Blocks/Modals/FeedbackModal',\n  decorators: [(Story) => <Story />],\n} as Meta\n\nexport const Default = () => {\n  const snackbar = useSnackbar()\n  const disclosure = useDisclosure({\n    defaultIsOpen: true,\n  })\n\n  const onSubmit: SubmitHandler<FeedbackInput> = (data) => {\n    console.log(data)\n\n    disclosure.onClose()\n    snackbar.success('Thank you, your feedback has been submitted.')\n  }\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={disclosure.onOpen}>\n        Submit feedback\n      </Button>\n      <FeedbackModal\n        onSubmit={onSubmit}\n        {...disclosure}\n        // These props are only required for demo purposes\n        blockScrollOnMount={false}\n        trapFocus={false}\n      />\n    </>\n  )\n}\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true,
    "height": "540px"
  }
}