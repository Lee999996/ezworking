{
  "name": "sortable-nav-group-items",
  "type": "registry:block",
  "version": "1.1.0",
  "private": false,
  "description": "Sortable nav group items.",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons",
    "@dnd-kit/utilities",
    "@dnd-kit/core",
    "@dnd-kit/sortable"
  ],
  "files": [
    {
      "path": "blocks/sidebar-layouts/sortable-nav-group/sortable-nav-group.tsx",
      "content": "import * as React from 'react'\n\nimport { Box } from '@chakra-ui/react'\nimport {\n  DndContext,\n  DndContextProps,\n  DragEndEvent,\n  DragOverlay,\n  UniqueIdentifier,\n  closestCenter,\n  defaultDropAnimationSideEffects,\n} from '@dnd-kit/core'\nimport { SortableContext, arrayMove, useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { NavGroup, NavGroupProps, NavItem, NavItemProps } from '@saas-ui/react'\nimport { LuGripVertical } from 'react-icons/lu'\n\nexport interface SortableNavGroupProps\n  extends Omit<NavGroupProps, 'onDragStart' | 'onDragEnd' | 'onDragOver'>,\n    DndContextProps {\n  items: any[]\n  onSorted?: (fn: (items: any[]) => any[]) => void\n}\n\nexport const SortableNavGroup: React.FC<SortableNavGroupProps> = (props) => {\n  const {\n    children,\n    onDragStart,\n    onDragOver,\n    onDragEnd,\n    onSorted,\n    items,\n    ...rest\n  } = props\n\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null)\n  const getIndex = (id: UniqueIdentifier) =>\n    items.findIndex((item) => item.id === id)\n  const activeIndex = activeId ? getIndex(activeId) : -1\n  const activeItem = (\n    React.Children.toArray(children) as React.ReactElement[]\n  ).find(\n    (child) => child.type === SortableNavItem && child.props.id === activeId,\n  )\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { over } = event\n\n    if (over) {\n      const overIndex = getIndex(over.id)\n      if (activeIndex !== overIndex) {\n        onSorted?.((items) => arrayMove(items, activeIndex, overIndex))\n      }\n    }\n\n    setActiveId(null)\n  }\n\n  return (\n    <DndContext\n      collisionDetection={closestCenter}\n      onDragStart={(event) => {\n        if (!event.active) {\n          return\n        }\n        setActiveId(event.active.id)\n        onDragStart?.(event)\n      }}\n      onDragOver={onDragOver}\n      onDragEnd={(event) => {\n        handleDragEnd(event)\n        onDragEnd?.(event)\n      }}\n      onDragCancel={() => setActiveId(null)}\n    >\n      <SortableContext items={items}>\n        <NavGroup {...rest}>{children}</NavGroup>\n      </SortableContext>\n      <DragOverlay\n        dropAnimation={{\n          duration: 50,\n          sideEffects: defaultDropAnimationSideEffects({\n            styles: {\n              active: {\n                opacity: '0.2',\n              },\n            },\n          }),\n        }}\n      >\n        {activeItem ? (\n          <NavItem\n            {...activeItem.props}\n            my=\"0\"\n            _hover={{ bg: 'transparent' }}\n            opacity=\"0.8\"\n          />\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  )\n}\n\nexport interface SortableNavItemProps extends NavItemProps {\n  id: string\n  handle?: React.ReactNode\n}\n\nexport const SortableNavItem: React.FC<SortableNavItemProps> = (props) => {\n  const { id, children, handle, ...rest } = props\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({\n    id,\n    transition: { duration: 150, easing: 'cubic-bezier(0.25, 1, 0.5, 1)' },\n  })\n\n  const itemProps = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0 : undefined,\n    ...attributes,\n    ...listeners,\n  }\n\n  return (\n    <NavItem\n      ref={setNodeRef}\n      {...rest}\n      {...itemProps}\n      data-dragging={isDragging || !!transform}\n      data-sortable\n      sx={{\n        position: 'relative',\n        a: {\n          userSelect: 'none',\n          WebkitUserDrag: 'none',\n        },\n      }}\n    >\n      {handle ?? (\n        <Box\n          display=\"none\"\n          pos=\"absolute\"\n          left=\"-10px\"\n          color=\"muted\"\n          opacity=\"0.6\"\n          cursor=\"grab\"\n          data-drag-handle\n          sx={{\n            '[data-sortable]:hover &': { display: 'block' },\n            '[data-dragging] &': { display: 'none' },\n          }}\n        >\n          <LuGripVertical size=\"12\" />\n        </Box>\n      )}\n      {children}\n    </NavItem>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/sidebar-layouts/sortable-nav-group/sortable-nav-group.stories.tsx",
      "content": "import * as React from 'react'\n\nimport { Badge, Text } from '@chakra-ui/react'\nimport { Page, PageBody, PageHeader } from '@saas-ui-pro/react'\nimport { SaasUILogo } from '@saas-ui/assets'\nimport {\n  AppShell,\n  NavGroup,\n  NavItem,\n  Sidebar,\n  SidebarSection,\n} from '@saas-ui/react'\nimport type { Meta } from '@storybook/react'\nimport { LuHome, LuSettings, LuUsers } from 'react-icons/lu'\n\nimport { SortableNavGroup, SortableNavItem } from './sortable-nav-group.js'\n\nexport default {\n  title: 'Blocks/SidebarLayouts/SortableNavGroupItems',\n} as Meta\n\nconst tags = [\n  {\n    id: 'lead',\n    name: 'Lead',\n    count: 83,\n    color: 'purple.500',\n  },\n  {\n    id: 'customer',\n    name: 'Customer',\n    count: 210,\n    color: 'green.500',\n  },\n  {\n    id: 'partner',\n    name: 'Partner',\n    count: 12,\n    color: 'blue.500',\n  },\n  {\n    id: 'prospect',\n    name: 'Prospect',\n    count: 0,\n  },\n]\n\nexport const Default = () => {\n  const [sortedTags, setTags] = React.useState(tags)\n  return (\n    <AppShell\n      variant=\"static\"\n      height=\"600px\"\n      bg=\"app-background\"\n      sidebar={\n        <Sidebar>\n          <SidebarSection>\n            <SaasUILogo width=\"100px\" />\n          </SidebarSection>\n          <SidebarSection flex=\"1\" overflowY=\"auto\">\n            <NavGroup>\n              <NavItem href=\"#\" icon={<LuHome size=\"1.2em\" />}>\n                Home\n              </NavItem>\n              <NavItem href=\"#\" icon={<LuUsers size=\"1.2em\" />} isActive>\n                Contacts\n              </NavItem>\n              <NavItem href=\"#\" icon={<LuSettings size=\"1.2em\" />}>\n                Settings\n              </NavItem>\n            </NavGroup>\n            <SortableNavGroup\n              title=\"Tags\"\n              isCollapsible\n              items={sortedTags}\n              onSorted={setTags}\n            >\n              {sortedTags.map((tag) => (\n                <SortableNavItem\n                  key={tag.id}\n                  id={tag.id}\n                  href=\"#\"\n                  my=\"0\"\n                  icon={\n                    <Badge\n                      bg={tag.color || 'gray.500'}\n                      boxSize=\"2\"\n                      borderRadius=\"full\"\n                      variant=\"solid\"\n                    />\n                  }\n                >\n                  <Text>{tag.name}</Text>\n                  <Badge\n                    opacity=\"0.6\"\n                    borderRadius=\"full\"\n                    bg=\"none\"\n                    ms=\"auto\"\n                    fontWeight=\"medium\"\n                  >\n                    {tag.count}\n                  </Badge>\n                </SortableNavItem>\n              ))}\n            </SortableNavGroup>\n          </SidebarSection>\n        </Sidebar>\n      }\n    >\n      <Page>\n        <PageHeader title=\"\"></PageHeader>\n        <PageBody></PageBody>\n      </Page>\n    </AppShell>\n  )\n}\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true
  }
}