{
  "name": "sortable-task-list",
  "type": "registry:block",
  "version": "1.1.0",
  "private": true,
  "description": "A list of tasks with drag and drop sorting.",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/lists/sortable-task-list/sortable-task-list.tsx",
      "content": "import * as React from 'react'\n\nimport { Box, Checkbox, HStack, Portal, Tag, Text } from '@chakra-ui/react'\nimport {\n  Active,\n  DndContext,\n  DndContextProps,\n  DragEndEvent,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  Over,\n  TouchSensor,\n  UniqueIdentifier,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core'\nimport { snapCenterToCursor } from '@dnd-kit/modifiers'\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable'\nimport {\n  StructuredList,\n  StructuredListButton,\n  StructuredListCell,\n  StructuredListHeader,\n  StructuredListItem,\n} from '@saas-ui/react'\n\nexport interface SortableTaskListProps extends DndContextProps {\n  tasks: Task[]\n  states?: TaskStates\n}\n\nconst useSortableTaskList = (props: SortableTaskListProps) => {\n  const {\n    tasks,\n    states = taskStates,\n    onDragStart,\n    onDragOver,\n    onDragEnd,\n    onDragCancel,\n    ...rest\n  } = props\n\n  const [items, setItems] = React.useState<Task[]>(tasks)\n\n  const [groupedItems, flatIds] = React.useMemo(() => {\n    const groupedItems: Record<string, Task[]> = {}\n    const flatIds: string[] = []\n\n    for (const task of items) {\n      if (!groupedItems[task.status]) {\n        groupedItems[task.status] = []\n        flatIds.push(getHeaderId(task.status))\n      }\n\n      groupedItems[task.status].push(task)\n      flatIds.push(task.id)\n    }\n\n    return [groupedItems, flatIds]\n  }, [items])\n\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null)\n\n  const getIndex = (id: UniqueIdentifier) =>\n    items.findIndex((item) => item.id === id)\n\n  const activeItem = tasks.find((task) => task.id === activeId)\n  const activeIndex = activeId ? getIndex(activeId) : -1\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { over } = event\n\n    if (!over || !activeItem) {\n      return\n    }\n\n    const overIndex = getIndex(over.id)\n    const overType = over.data.current?.type\n\n    if (overType === 'task' && activeIndex !== overIndex) {\n      setItems((items) => {\n        if (\n          over.data.current?.task &&\n          over.data.current?.task.status !== activeItem?.status\n        ) {\n          // Update the status of the task and move it to the new status group\n          const item = {\n            ...activeItem,\n            status: over.data.current?.task.status,\n          }\n\n          items[activeIndex] = item\n        }\n\n        return arrayMove(items, activeIndex, overIndex)\n      })\n    } else if (overType === 'header' && over.data.current?.sortable.index > 0) {\n      // Move the task to the status group above the header\n      const index = over.data.current?.sortable.index\n      const prevId = flatIds[index - 1]\n      const prevItem = tasks.find((task) => task.id === prevId)\n\n      if (prevItem) {\n        setItems((items) => {\n          const item = {\n            ...activeItem,\n            status: prevItem.status,\n          }\n\n          items[activeIndex] = item\n\n          return arrayMove(items, activeIndex, overIndex)\n        })\n      }\n    }\n\n    setActiveId(null)\n  }\n\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        delay: 50,\n        tolerance: 5,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 250,\n        tolerance: 5,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  )\n\n  const dndContextProps: DndContextProps = {\n    collisionDetection: closestCenter,\n    sensors,\n    onDragStart: (event) => {\n      if (!event.active) {\n        return\n      }\n      setActiveId(event.active.id)\n      onDragStart?.(event)\n    },\n    onDragOver,\n    onDragEnd: (event) => {\n      handleDragEnd(event)\n      onDragEnd?.(event)\n    },\n    onDragCancel: (event) => {\n      setActiveId(null)\n      onDragCancel?.(event)\n    },\n    ...rest,\n  }\n\n  return {\n    dndContextProps,\n    items,\n    groupedItems,\n    flatIds,\n    activeItem,\n    states,\n  }\n}\n\nexport const SortableTaskList: React.FC<SortableTaskListProps> = (props) => {\n  const { dndContextProps, groupedItems, flatIds, activeItem, states } =\n    useSortableTaskList(props)\n\n  return (\n    <DndContext {...dndContextProps}>\n      <SortableContext items={flatIds}>\n        <StructuredList py=\"0\">\n          {Object.entries(groupedItems).map(([status, tasks]) => (\n            <React.Fragment key={status}>\n              <TaskListHeader\n                id={status}\n                title={states[status]?.label}\n                total={tasks.length}\n              />\n              {tasks.map((task) => (\n                <TaskListItem key={task.id} task={task} />\n              ))}\n            </React.Fragment>\n          ))}\n        </StructuredList>\n        <Portal>\n          {activeItem ? (\n            <DragOverlay\n              style={{ minWidth: 200 }}\n              modifiers={[snapCenterToCursor]}\n            >\n              <TaskListDragItem task={activeItem} />\n            </DragOverlay>\n          ) : null}\n        </Portal>\n      </SortableContext>\n    </DndContext>\n  )\n}\n\nconst getHeaderId = (id: string) => `task-list-header-${id}`\n\nconst TaskListHeader: React.FC<{ id: string; title: string; total: number }> = (\n  props,\n) => {\n  const id = getHeaderId(props.id)\n\n  const { setNodeRef, over, active } = useSortable({\n    id,\n    data: {\n      type: 'header',\n    },\n    disabled: true,\n  })\n\n  const itemProps = useSortableProps({\n    active,\n    over,\n    id,\n  })\n\n  return (\n    <Box\n      as=\"li\"\n      ref={setNodeRef}\n      {...itemProps}\n      listStyleType=\"none\"\n      position=\"relative\"\n    >\n      <StructuredListHeader\n        as=\"div\"\n        fontWeight=\"normal\"\n        bg=\"gray.100\"\n        _dark={{ bg: 'gray.700' }}\n        color=\"app-text\"\n      >\n        {props.title}\n        <Text as=\"span\" color=\"muted\" ms=\"2\">\n          {props.total}\n        </Text>\n      </StructuredListHeader>\n    </Box>\n  )\n}\n\nconst TaskListDragItem: React.FC<{ task: Task }> = (props) => {\n  return (\n    <Box\n      display=\"inline-block\"\n      px=\"3\"\n      py=\"2\"\n      boxShadow=\"md\"\n      borderRadius=\"md\"\n      borderWidth=\"1px\"\n      bg=\"chakra-body-bg\"\n      width=\"auto\"\n      cursor=\"grabbing\"\n      userSelect=\"none\"\n    >\n      {props.task.title}\n    </Box>\n  )\n}\n\nconst useSortableProps = ({\n  id,\n  active,\n  over,\n}: {\n  id: string\n  active: Active | null\n  over: Over | null\n}) => {\n  // make sure items can't be dropped above the first header.\n  if (\n    id === over?.id &&\n    over?.data.current?.type === 'header' &&\n    over.data.current.sortable.index === 0\n  ) {\n    return {\n      'data-dnd-dragging': 'false',\n      'data-dnd-over': 'false',\n      'data-dnd-below-active': 'false',\n    }\n  }\n\n  return {\n    'data-dnd-dragging': active && active?.id === id ? 'true' : 'false',\n    'data-dnd-over':\n      active?.id !== over?.id && over?.id === id ? 'true' : 'false',\n    'data-dnd-below-active':\n      over?.data.current?.sortable.index > active?.data.current?.sortable.index,\n    sx: {\n      '&[data-dnd-dragging=true]': {\n        opacity: 0.5,\n      },\n      '&[data-dnd-over=true]': {\n        _after: {\n          content: '\"\"',\n          position: 'absolute',\n          width: '100%',\n          height: '2px',\n          background: 'primary.500',\n        },\n      },\n      '&[data-dnd-below-active=false][data-dnd-over=true]': {\n        _after: {\n          top: '-1px',\n        },\n      },\n      '&[data-dnd-below-active=true][data-dnd-over=true]': {\n        _after: {\n          bottom: '-1px',\n        },\n      },\n    },\n  }\n}\n\nconst TaskListItem: React.FC<{ task: Task }> = (props) => {\n  const { task } = props\n\n  const { attributes, listeners, setNodeRef, over, active } = useSortable({\n    id: task.id,\n    data: {\n      type: 'task',\n      task,\n    },\n  })\n\n  const itemProps = useSortableProps({\n    active,\n    over,\n    id: task.id,\n  })\n\n  return (\n    <StructuredListItem\n      ref={setNodeRef}\n      {...itemProps}\n      position=\"relative\"\n      p=\"0\"\n      borderBottom=\"1px\"\n      borderColor=\"gray.100\"\n      fontSize=\"sm\"\n      _dark={{\n        borderColor: 'whiteAlpha.100',\n      }}\n    >\n      <StructuredListButton\n        as={HStack}\n        {...attributes}\n        {...listeners}\n        h=\"10\"\n        py=\"0\"\n        _hover={{\n          bg: 'gray.50',\n          _dark: {\n            bg: 'whiteAlpha.50',\n          },\n        }}\n      >\n        <StructuredListCell width=\"4\" role=\"group\">\n          <Checkbox\n            opacity=\"0\"\n            _checked={{ opacity: 1 }}\n            _groupHover={{ opacity: 1 }}\n            size=\"md\"\n            rounded=\"sm\"\n          />\n        </StructuredListCell>\n        <StructuredListCell color=\"muted\">{task.id}</StructuredListCell>\n        <StructuredListCell flex=\"1\">\n          <Text noOfLines={1}>{task.title}</Text>\n        </StructuredListCell>\n        <StructuredListCell\n          color=\"muted\"\n          as={HStack}\n          display={{ base: 'none', md: 'flex' }}\n          gap=\"1\"\n        >\n          {task.labels.map((label) => (\n            <Tag\n              key={label}\n              bg=\"none\"\n              border=\"1px solid\"\n              borderColor=\"blackAlpha.100\"\n              color=\"muted\"\n              rounded=\"full\"\n              _dark={{\n                borderColor: 'whiteAlpha.100',\n              }}\n            >\n              {label}\n            </Tag>\n          ))}\n        </StructuredListCell>\n        <StructuredListCell color=\"muted\" flexShrink=\"0\">\n          {task.date}\n        </StructuredListCell>\n      </StructuredListButton>\n    </StructuredListItem>\n  )\n}\n\ntype TaskStates = Record<string, { label: string; color: string }>\n\nconst taskStates: TaskStates = {\n  todo: {\n    label: 'To do',\n    color: 'gray',\n  },\n  'in-progress': {\n    label: 'In progress',\n    color: 'yellow',\n  },\n  done: {\n    label: 'Done',\n    color: 'green',\n  },\n}\n\nexport interface Task {\n  id: string\n  title: string\n  date: string\n  labels: string[]\n  status: string\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/lists/sortable-task-list/sortable-task-list.stories.tsx",
      "content": "import * as React from 'react'\n\nimport { Meta } from '@storybook/react'\n\nimport { SortableTaskList, type Task } from './sortable-task-list.js'\n\nexport default {\n  title: 'Blocks/Lists/SortableTaskList',\n} as Meta\n\nconst tasks: Array<Task> = [\n  {\n    id: 'SUI-123',\n    title: 'Research product trends',\n    date: '10 Jan',\n    labels: ['Research', 'Trends'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-133',\n    title: 'Develop user interface',\n    date: '3 Feb',\n    labels: ['UI', 'Development'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-134',\n    title: 'Create user experience flows',\n    date: '5 Feb',\n    labels: ['UX', 'Flows'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-135',\n    title: 'Select materials for production',\n    date: '7 Feb',\n    labels: ['Materials', 'Production'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-136',\n    title: 'Work with engineers on product specifications',\n    date: '9 Feb',\n    labels: ['Engineering', 'Specifications'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-137',\n    title: 'Conduct user research',\n    date: '11 Feb',\n    labels: ['User research', 'Testing'],\n    status: 'in-progress',\n  },\n  {\n    id: 'SUI-124',\n    title: 'Brainstorm product ideas',\n    date: '12 Jan',\n    labels: ['Brainstorming', 'Ideas'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-125',\n    title: 'Create initial sketches',\n    date: '15 Jan',\n    labels: ['sketches', 'design'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-126',\n    title: 'Get feedback on sketches',\n    date: '17 Jan',\n    labels: ['Feedback', 'Design'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-127',\n    title: 'Refine and finalize design',\n    date: '20 Jan',\n    labels: ['Design', 'Refinement'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-128',\n    title: 'Create 3D model',\n    date: '23 Jan',\n    labels: ['3D', 'Model'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-129',\n    title: 'Test and iterate prototype',\n    date: '25 Jan',\n    labels: ['Testing', 'Prototype'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-130',\n    title: 'Refine prototype based on feedback',\n    date: '27 Jan',\n    labels: ['Feedback', 'Iteration'],\n    status: 'todo',\n  },\n  {\n    id: 'SUI-131',\n    title: 'Create final product',\n    date: '30 Jan',\n    labels: ['Final', 'Product'],\n    status: 'done',\n  },\n  {\n    id: 'SUI-132',\n    title: 'Test final product before launch',\n    date: '1 Feb',\n    labels: ['testing', 'final'],\n    status: 'Done',\n  },\n]\n\nexport const Default = () => <SortableTaskList tasks={tasks} />\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true,
    "height": "400px"
  }
}