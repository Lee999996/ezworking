{
  "name": "chat-details",
  "type": "registry:block",
  "version": "1.1.0",
  "description": "A panel with chat bubbles",
  "dependencies": [
    "@chakra-ui/react",
    "@chakra-ui/utils",
    "@saas-ui/react",
    "react-icons"
  ],
  "files": [
    {
      "path": "blocks/communication/chat-details/chat-details.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Box,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Divider,\n  Flex,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Textarea,\n  forwardRef,\n  useMergeRefs,\n} from '@chakra-ui/react'\nimport { Persona } from '@saas-ui/react'\nimport {\n  LuChevronLeft,\n  LuMoreHorizontal,\n  LuPlus,\n  LuSend,\n  LuStar,\n} from 'react-icons/lu'\n\nexport function ChatDetails(props: { chat: Chat; currentUser: User }) {\n  const { chat, currentUser } = props\n\n  const inputRef = React.useRef<HTMLTextAreaElement | null>(null)\n\n  const [items, setItems] = React.useState(chat.items)\n\n  const mappedItems = items.map((item) => {\n    if (\n      item.type !== 'divider' &&\n      item.from?.type === 'admin' &&\n      currentUser.id === item.from.id\n    ) {\n      return {\n        ...item,\n        from: {\n          ...item.from,\n          name: 'You',\n        },\n      }\n    }\n    return item\n  })\n\n  const [message, setMessage] = React.useState('')\n\n  const submitMessage = React.useCallback(() => {\n    setItems([\n      ...items,\n      {\n        id: String(items.length + 1),\n        type: 'outbound-message',\n        message,\n        date: new Date().toISOString(),\n        from: {\n          type: 'admin',\n          ...currentUser,\n        },\n      },\n    ])\n    setMessage('')\n  }, [currentUser])\n\n  return (\n    <Card height=\"500px\" maxW=\"container.sm\" mx=\"auto\">\n      <CardHeader\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gap=\"1\"\n        borderBottomWidth=\"1px\"\n        p=\"1.5\"\n      >\n        <IconButton\n          aria-label=\"All chats\"\n          icon={<LuChevronLeft />}\n          variant=\"ghost\"\n        />\n        <Persona\n          size=\"sm\"\n          label={chat.contact.name}\n          secondaryLabel={chat.contact.email}\n          src={chat.contact.avatar}\n        />\n        <Spacer />\n        <IconButton\n          aria-label=\"Add to favourties\"\n          icon={<LuStar />}\n          variant=\"ghost\"\n        />\n        <Menu>\n          <MenuButton\n            as={IconButton}\n            variant=\"ghost\"\n            size=\"sm\"\n            icon={<LuMoreHorizontal />}\n            aria-label=\"More options\"\n          />\n          <MenuList>\n            <MenuItem>Archive chat</MenuItem>\n          </MenuList>\n        </Menu>\n      </CardHeader>\n      <CardBody\n        minHeight=\"0\"\n        flex=\"1\"\n        p=\"0\"\n        bg=\"gray.50\"\n        _dark={{ bg: 'gray.800' }}\n      >\n        <ChatBody items={mappedItems} />\n      </CardBody>\n      <CardFooter borderTopWidth=\"1px\" gap=\"2\" p=\"1.5\">\n        <IconButton\n          aria-label=\"Attach file\"\n          icon={<LuPlus />}\n          variant=\"ghost\"\n        />\n        <Box\n          display=\"grid\"\n          flex=\"1\"\n          fontSize=\"sm\"\n          _after={{\n            // this will make sure the textarea height scales based on the content.\n            // `field-sizing=\"content\"` is not widely supported yet.\n            // alternatively, you can use a div with contentEditable=true, eg with tiptap editor.\n            content: 'attr(data-value) \" \"',\n            whiteSpace: 'pre-wrap',\n            visibility: 'hidden',\n            gridArea: '1 / 1 / 2 / 2',\n            py: '1.5',\n            px: '3',\n            border: '1px',\n          }}\n          data-value={message}\n        >\n          <Textarea\n            ref={inputRef}\n            gridArea=\"1 / 1 / 2 / 2\"\n            field-sizing=\"content\"\n            placeholder=\"Write your message...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyUp={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                submitMessage()\n              }\n            }}\n            height=\"auto\"\n            minHeight=\"8\"\n            resize=\"none\"\n            rows={1}\n            py=\"1.5\"\n            px=\"3\"\n          />\n        </Box>\n        <IconButton\n          ml=\"auto\"\n          colorScheme=\"primary\"\n          icon={<LuSend />}\n          aria-label=\"Send\"\n          onClick={() => {\n            submitMessage()\n\n            inputRef.current?.focus()\n          }}\n        />\n      </CardFooter>\n    </Card>\n  )\n}\n\ninterface ChatBodyProps {\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void\n  items: ChatItemProps[]\n}\n\nconst ChatBody: React.FC<ChatBodyProps> = forwardRef((props, ref) => {\n  const { items, onScroll: onScrollProp, ...rest } = props\n\n  const scrollRef = React.useRef<HTMLDivElement>(null)\n  const initialized = React.useRef(false)\n  const isAtBottom = React.useRef(true)\n\n  const onScroll = React.useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      if (initialized.current) {\n        const { scrollTop, scrollHeight, clientHeight } = event.currentTarget\n        // include some padding to also scroll to bottom when we're not exactly at the bottom.\n        isAtBottom.current = scrollTop + clientHeight >= scrollHeight - 40\n      }\n      onScrollProp?.(event)\n    },\n    [onScrollProp],\n  )\n\n  React.useEffect(() => {\n    if (!scrollRef.current) {\n      return\n    }\n\n    const scrollToBottom = (animate?: boolean) =>\n      scrollRef.current?.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: animate ? 'smooth' : 'instant',\n      })\n\n    const observer = new MutationObserver((mutationsList) => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n          if (isAtBottom.current) {\n            scrollToBottom(true)\n          }\n        }\n      }\n    })\n    observer.observe(scrollRef.current, { childList: true })\n\n    scrollToBottom()\n\n    initialized.current = true\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [])\n\n  return (\n    <Box\n      ref={useMergeRefs(scrollRef, ref)}\n      {...rest}\n      height=\"100%\"\n      overflowY=\"auto\"\n      p=\"3\"\n      onScroll={onScroll}\n    >\n      {items.map((item) => (\n        <ChatItem key={'id' in item ? item.id : item.date} {...item} />\n      ))}\n    </Box>\n  )\n})\n\ninterface User {\n  id: string\n  name: string\n  avatar?: string\n}\n\ninterface Contact {\n  name: string\n  email: string\n  avatar?: string\n}\n\nexport interface Chat {\n  contact: Contact\n  items: ChatItemProps[]\n}\n\ninterface ChatItemFrom {\n  id: string\n  type: 'user' | 'system' | 'bot' | 'admin'\n  name: string\n  avatar?: string\n}\n\ninterface ChatItemMessage {\n  id: string\n  type: 'outbound-message' | 'inbound-message'\n  date: string\n  from: ChatItemFrom\n  message: string\n}\n\ninterface ChatItemDivider {\n  type: 'divider'\n  date: string\n}\n\ntype ChatItemProps = ChatItemMessage | ChatItemDivider\n\nconst ChatItem: React.FC<ChatItemProps> = (props) => {\n  switch (props.type) {\n    case 'outbound-message':\n      return <ChatMessage {...props} />\n    case 'inbound-message':\n      return <ChatMessage {...props} />\n    case 'divider':\n      return <ChatItemDateDivider {...props} />\n    default:\n      return null\n  }\n}\n\ninterface ChatMessageProps {\n  type: 'outbound-message' | 'inbound-message'\n  message: string\n  date: string\n  from: ChatItemFrom\n}\n\nconst ChatMessage: React.FC<ChatMessageProps> = (props) => {\n  const { type, from, message, date } = props\n\n  let styles = {\n    alignItems: 'flex-start',\n    '--message-bg': 'colors.gray.400',\n    _dark: {\n      '--message-bg': 'colors.gray.600',\n    },\n  }\n\n  if (type === 'outbound-message') {\n    styles = {\n      alignItems: 'flex-end',\n      '--message-bg': 'colors.primary.500',\n      _dark: {\n        '--message-bg': 'colors.primary.600',\n      },\n    }\n  }\n\n  return (\n    <Flex mt=\"4\" _first={{ mt: 0 }} direction=\"column\" sx={styles}>\n      <Box\n        px=\"2\"\n        py=\"1\"\n        borderRadius=\"md\"\n        bg=\"var(--message-bg)\"\n        color=\"white\"\n        maxW=\"80%\"\n      >\n        {message}\n      </Box>\n      <HStack\n        fontSize=\"xs\"\n        color=\"muted\"\n        alignItems=\"center\"\n        mt=\"2\"\n        spacing=\"1\"\n      >\n        <Persona size=\"2xs\" label={from.name} src={from.avatar} />\n        <span>âˆ™</span>\n        <Box>\n          <FormattedDate date={date} />\n        </Box>\n      </HStack>\n    </Flex>\n  )\n}\n\nconst isSameDay = (date1: Date, date2: Date) => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  )\n}\n\ninterface ChatItemDateDividerProps {\n  date: string\n}\n\nconst ChatItemDateDivider: React.FC<ChatItemDateDividerProps> = (props) => {\n  const { label, color } = React.useMemo(() => {\n    let label = ''\n    const date = new Date(props.date)\n    const today = new Date()\n    const yesterday = new Date()\n    yesterday.setDate(yesterday.getDate() - 1)\n\n    const isToday = isSameDay(date, today)\n\n    if (isToday) {\n      label = 'Today'\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      label = 'Yesterday'\n    } else {\n      label = date.toLocaleDateString()\n    }\n\n    return {\n      label,\n      color: isToday ? 'red.500' : 'muted',\n    }\n  }, [props.date])\n\n  const divider = (\n    <Divider\n      borderColor=\"currentColor\"\n      opacity=\"0.15\"\n      _dark={{ opacity: '0.5' }}\n    />\n  )\n\n  return (\n    <HStack color={color} fontSize=\"xs\" fontWeight=\"medium\" spacing=\"3\" my=\"3\">\n      {divider}\n      <Box flexShrink=\"0\">{label}</Box>\n      {divider}\n    </HStack>\n  )\n}\n\nconst FormattedDate: React.FC<{ date: string }> = (props) => {\n  const [now, setNow] = React.useState(new Date())\n  const [date] = React.useState(new Date(props.date))\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(new Date())\n    }, 1000 * 60)\n    return () => clearInterval(interval)\n  }, [])\n\n  const diff = now.getTime() - date.getTime()\n\n  if (diff < 1000 * 60) {\n    return 'Just now'\n  } else if (isSameDay(now, date)) {\n    return (\n      <>\n        {date.toLocaleTimeString(undefined, {\n          hour: '2-digit',\n          minute: '2-digit',\n        })}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {date.toLocaleDateString()}{' '}\n      {date.toLocaleTimeString(undefined, {\n        hour: '2-digit',\n        minute: '2-digit',\n      })}\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/communication/chat-details/chat-details.stories.tsx",
      "content": "import * as React from 'react'\n\nimport { Meta } from '@storybook/react'\n\nimport { type Chat, ChatDetails } from './chat-details.js'\n\nexport default {\n  title: 'Blocks/Communication/ChatDetails',\n} as Meta\n\nconst currentUser = {\n  id: '1',\n  name: 'Beatriz Moreno',\n}\n\nconst chat = {\n  contact: {\n    name: 'Katarzyna Azulay',\n    email: 'katzyna@web.name',\n    avatar: 'https://xsgames.co/randomusers/assets/avatars/female/25.jpg',\n  },\n  items: [\n    {\n      id: '1',\n      type: 'inbound-message',\n      message: \"Hi, I'm having trouble with logging in. Can you help?\",\n      date: '2024-01-27T01:00:00.000Z',\n      from: {\n        id: '1',\n        type: 'user',\n        name: 'Katarzyna Azulay',\n        avatar: 'https://xsgames.co/randomusers/assets/avatars/female/25.jpg',\n      },\n    },\n    {\n      id: '2',\n      type: 'outbound-message',\n      message:\n        \"Of course! I'd be happy to assist. Can you provide more details about the issue you're facing?\",\n      date: '2024-01-27T01:05:00.000Z',\n      from: {\n        id: '1',\n        type: 'admin',\n        name: 'Beatriz Moreno',\n      },\n    },\n    {\n      type: 'divider',\n      date: '2024-01-29T12:00:00.000Z',\n    },\n    {\n      id: '3',\n      type: 'inbound-message',\n      message: 'Sure, it says my password is incorrect.',\n      date: '2024-01-29T12:00:00.000Z',\n      from: {\n        id: '1',\n        type: 'user',\n        name: 'Katarzyna Azulay',\n        avatar: 'https://xsgames.co/randomusers/assets/avatars/female/25.jpg',\n      },\n    },\n    {\n      id: '4',\n      type: 'outbound-message',\n      message:\n        \"Thanks for sharing. Let me investigate this for you. I'll get back to you shortly.\",\n      date: '2024-01-29T12:05:00.000Z',\n      from: {\n        id: '1',\n        type: 'admin',\n        name: 'Beatriz Moreno',\n      },\n    },\n  ],\n} satisfies Chat\n\nexport const Default = () => (\n  <ChatDetails chat={chat} currentUser={currentUser} />\n)\n",
      "type": "registry:story"
    }
  ],
  "canvas": {
    "center": true
  }
}